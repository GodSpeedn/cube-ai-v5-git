"""
GitHub Configuration Script
Helps you configure GitHub credentials for the git integration system
"""

import os
import sys
from pathlib import Path

def configure_github():
    """Interactive GitHub configuration"""
    print("🔧 GitHub Configuration for Git Integration System")
    print("=" * 50)
    
    print("\n📝 You need to provide:")
    print("1. GitHub Personal Access Token")
    print("2. Your GitHub username")
    print("3. Your email (optional)")
    
    print("\n🔑 To get your GitHub token:")
    print("1. Go to: https://github.com/settings/tokens")
    print("2. Click 'Generate new token' -> 'Generate new token (classic)'")
    print("3. Give it a name like 'AI Assistant Git Integration'")
    print("4. Select 'repo' scope (full control of private repositories)")
    print("5. Click 'Generate token'")
    print("6. Copy the token (it starts with 'ghp_')")
    
    print("\n" + "=" * 50)
    
    # Get token
    token = input("\n🔑 Enter your GitHub token (ghp_...): ").strip()
    if not token.startswith('ghp_'):
        print("⚠️ Warning: Token should start with 'ghp_'")
    
    # Get username
    username = input("👤 Enter your GitHub username: ").strip()
    
    # Get email (optional)
    email = input("📧 Enter your email (optional): ").strip()
    
    if not token or not username:
        print("❌ Token and username are required!")
        return False
    
    # Set environment variables
    os.environ['GITHUB_TOKEN'] = token
    os.environ['GITHUB_USERNAME'] = username
    if email:
        os.environ['GITHUB_EMAIL'] = email
    
    print("\n✅ Environment variables set!")
    print(f"   GITHUB_TOKEN: {token[:10]}...")
    print(f"   GITHUB_USERNAME: {username}")
    if email:
        print(f"   GITHUB_EMAIL: {email}")
    
    # Test the configuration
    print("\n🧪 Testing configuration...")
    try:
        from git_agent import git_agent
        
        # Configure the agent
        result = git_agent.configure_github(token, username, email)
        if result["success"]:
            print(f"✅ GitHub configured successfully!")
            print(f"   User: {result['user']['login']}")
            print(f"   Name: {result['user']['name']}")
            return True
        else:
            print(f"❌ Configuration failed: {result['error']}")
            return False
            
    except Exception as e:
        print(f"❌ Error testing configuration: {e}")
        return False

def create_env_file():
    """Create .env file with current environment variables"""
    env_content = f"""# GitHub Configuration for Git Integration System
# Generated by configure_github.py

GITHUB_TOKEN={os.getenv('GITHUB_TOKEN', '')}
GITHUB_USERNAME={os.getenv('GITHUB_USERNAME', '')}
GITHUB_EMAIL={os.getenv('GITHUB_EMAIL', '')}
"""
    
    env_file = Path('.env')
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"📁 Created .env file: {env_file.absolute()}")
    return True

def main():
    """Main configuration function"""
    print("🚀 GitHub Configuration Setup")
    print("=" * 50)
    
    # Check if already configured
    if os.getenv('GITHUB_TOKEN') and os.getenv('GITHUB_USERNAME'):
        print("✅ GitHub already configured!")
        print(f"   Username: {os.getenv('GITHUB_USERNAME')}")
        print(f"   Token: {os.getenv('GITHUB_TOKEN')[:10]}...")
        
        response = input("\n🔄 Reconfigure? (y/N): ")
        if response.lower() not in ['y', 'yes']:
            return
    
    # Run configuration
    if configure_github():
        print("\n🎉 Configuration successful!")
        
        # Ask to create .env file
        response = input("\n📁 Create .env file for persistence? (Y/n): ")
        if response.lower() not in ['n', 'no']:
            create_env_file()
        
        print("\n📝 Next steps:")
        print("1. Run: python test_integration.py")
        print("2. Run: python example_usage.py")
        print("3. Use: git_agent.extract_and_push_code('my-repo')")
    else:
        print("\n❌ Configuration failed. Please try again.")

if __name__ == "__main__":
    main()
