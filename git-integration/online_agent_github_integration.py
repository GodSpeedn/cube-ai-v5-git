"""
Online Agent GitHub Integration
Connects the online manual agents to GitHub upload functionality
"""

import os
import sys
import asyncio
from pathlib import Path
from typing import Dict, Any, List, Optional
from datetime import datetime

# Add current directory to path
sys.path.append(str(Path(__file__).parent))

from git_agent import git_agent
from config import config

class OnlineAgentGitHubIntegration:
    """Integrates online manual agents with GitHub upload"""
    
    def __init__(self):
        self.git_agent = git_agent
        self.config = config
    
    def is_configured(self) -> bool:
        """Check if GitHub is configured"""
        return self.git_agent.is_configured()
    
    async def extract_and_upload_workflow_result(self, workflow_id: str, 
                                                repo_name: str = None,
                                                commit_message: str = None) -> Dict[str, Any]:
        """
        Extract code from a specific workflow and upload to GitHub
        
        Args:
            workflow_id: ID of the workflow to extract from
            repo_name: Name of the repository (auto-generated if None)
            commit_message: Commit message (auto-generated if None)
            
        Returns:
            Result of the upload operation
        """
        try:
            if not self.is_configured():
                return {
                    "success": False,
                    "error": "GitHub not configured. Please configure GitHub first."
                }
            
            # Generate automatic names if not provided
            if not repo_name:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                repo_name = f"workflow-{workflow_id}-{timestamp}"
            
            if not commit_message:
                commit_message = f"Workflow {workflow_id} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Extract and push code
            result = self.git_agent.extract_and_push_code(
                repo_name=repo_name,
                commit_message=commit_message,
                auto_create_repo=True
            )
            
            if result["success"]:
                return {
                    "success": True,
                    "workflow_id": workflow_id,
                    "repository_url": result["repository_url"],
                    "commit_sha": result["commit_sha"],
                    "files_pushed": result["files_pushed"],
                    "message": f"Workflow {workflow_id} uploaded to GitHub successfully"
                }
            else:
                return result
                
        except Exception as e:
            return {
                "success": False,
                "error": f"Failed to upload workflow {workflow_id}: {str(e)}"
            }
    
    async def upload_latest_generated_code(self, repo_name: str = None) -> Dict[str, Any]:
        """
        Upload the latest generated code from the main system
        
        Args:
            repo_name: Name of the repository (auto-generated if None)
            
        Returns:
            Result of the upload operation
        """
        try:
            if not self.is_configured():
                return {
                    "success": False,
                    "error": "GitHub not configured. Please configure GitHub first."
                }
            
            # Generate automatic name if not provided
            if not repo_name:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                repo_name = f"ai-generated-{timestamp}"
            
            # Extract and push latest code
            result = self.git_agent.extract_and_push_code(
                repo_name=repo_name,
                commit_message=f"Latest AI Generated Code - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                auto_create_repo=True
            )
            
            if result["success"]:
                return {
                    "success": True,
                    "repository_url": result["repository_url"],
                    "commit_sha": result["commit_sha"],
                    "files_pushed": result["files_pushed"],
                    "message": f"Latest generated code uploaded to GitHub successfully"
                }
            else:
                return result
                
        except Exception as e:
            return {
                "success": False,
                "error": f"Failed to upload latest code: {str(e)}"
            }
    
    def get_workflow_files(self, workflow_id: str) -> Dict[str, Any]:
        """
        Get files generated by a specific workflow
        
        Args:
            workflow_id: ID of the workflow
            
        Returns:
            List of files generated by the workflow
        """
        try:
            # This would need to be implemented to track workflow-specific files
            # For now, return all generated files
            result = self.git_agent.preview_extractable_code()
            if result["success"]:
                return {
                    "success": True,
                    "workflow_id": workflow_id,
                    "files": result["files"],
                    "stats": result["stats"]
                }
            else:
                return result
        except Exception as e:
            return {
                "success": False,
                "error": f"Failed to get workflow files: {str(e)}"
            }
    
    def configure_github(self, token: str, username: str, email: str = None) -> Dict[str, Any]:
        """Configure GitHub integration"""
        return self.git_agent.configure_github(token, username, email)
    
    def list_repositories(self) -> Dict[str, Any]:
        """List GitHub repositories"""
        return self.git_agent.list_repositories()

# Global integration instance
online_agent_github = OnlineAgentGitHubIntegration()
