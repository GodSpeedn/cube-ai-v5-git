#!/usr/bin/env python3
"""
Test the exact workflow that online agent service uses
"""

import os
import sys
from pathlib import Path

# Load keys first
try:
    from load_keys import load_keys_from_file
    load_keys_from_file()
    print("[OK] Keys loaded from keys.txt")
except ImportError:
    print("[WARN] load_keys.py not found, using environment variables only")

# Simulate the exact workflow from online_agent_service.py
print(f"\n[INFO] Testing online agent workflow...")

# Simulate a coder agent response
response_content = '''Here's the code you requested:

```python
def hello_world():
    """A simple hello world function"""
    return "Hello, World!"

if __name__ == "__main__":
    print(hello_world())
```

CODE COMPLETE: The function has been implemented successfully.
'''

conversation_id = "test_workflow_123"
file_type = "src"

print(f"[INFO] Simulating coder agent response:")
print(f"   Response: {response_content[:100]}...")
print(f"   Conversation ID: {conversation_id}")
print(f"   File type: {file_type}")

# Check for completion signals (like online_agent_service does)
completion_signals = ["CODE COMPLETE:", "CODE COMPLETE", "```python", "```", "def ", "class ", "import "]
has_completion_signal = any(signal in response_content for signal in completion_signals)

# Check for Python code patterns
python_patterns = ["def ", "class ", "import ", "if __name__", "print(", "return "]
has_python_code = any(pattern in response_content for pattern in python_patterns)

print(f"[INFO] Code detection:")
print(f"   Has completion signal: {has_completion_signal}")
print(f"   Has Python code: {has_python_code}")

if has_completion_signal or has_python_code:
    print(f"[INFO] Code detected - proceeding with save...")
    
    # Extract code (simplified version)
    code = ""
    if "```python" in response_content:
        start = response_content.find("```python") + 9
        end = response_content.find("```", start)
        if end != -1:
            code = response_content[start:end].strip()
    elif "```" in response_content:
        start = response_content.find("```") + 3
        end = response_content.find("```", start)
        if end != -1:
            code = response_content[start:end].strip()
    
    print(f"[INFO] Extracted code: {len(code)} characters")
    
    if code:
        # Import file manager (like online_agent_service does)
        from file_manager import file_manager
        
        # Create task description
        task_description = "Test Online Agent Workflow - Source Code Generated by Coder Agent"
        
        print(f"[INFO] Saving code with file_manager...")
        print(f"   Task description: {task_description}")
        print(f"   Conversation ID: {conversation_id}")
        print(f"   File type: {file_type}")
        
        # Save code using file manager
        result = file_manager.save_code(
            code=code,
            file_type=file_type,
            conversation_id=conversation_id,
            task_description=task_description
        )
        
        print(f"[OK] Save result: {result}")
        
        if result.get("success"):
            print(f"[OK] Code saved successfully: {result['filepath']}")
            print(f"   Project: {result['project_name']}")
            
            # Check GitHub result
            github_result = result.get("github_result", {})
            if github_result.get("status") == "success":
                print(f"[SUCCESS] Uploaded to GitHub: {github_result.get('repo_url')}")
                print(f"   Files uploaded: {github_result.get('files_uploaded', 0)}")
                print(f"   Upload time: {github_result.get('upload_time', 'Unknown')}")
            elif github_result.get("status") == "github_not_available":
                print("[WARN] GitHub not available - code saved locally only")
            else:
                error_msg = github_result.get('error', 'Unknown error')
                print(f"[ERROR] GitHub upload issue: {error_msg}")
        else:
            error_msg = result.get('error', 'Unknown error')
            print(f"[ERROR] Failed to save code: {error_msg}")
    else:
        print("[WARN] No code extracted from response")
else:
    print("[WARN] No code detected in response")

print(f"\n[INFO] Test complete!")
