#!/usr/bin/env python3
"""
Test file upload to GitHub
"""

import os
import sys
from pathlib import Path

# Add git-integration to path
git_integration_path = Path(__file__).parent.parent / "git-integration"
if git_integration_path.exists():
    sys.path.insert(0, str(git_integration_path))

# Load environment variables
from load_keys import load_keys_from_file, get_github_config, check_github_config

def test_file_upload():
    """Test the complete file upload process"""
    print("=" * 60)
    print("üß™ Testing File Upload to GitHub")
    print("=" * 60)
    
    # Load keys
    print("\n1. Loading API keys...")
    load_keys_from_file()
    
    # Check GitHub config
    print("\n2. Checking GitHub configuration...")
    if not check_github_config():
        print("‚ùå GitHub not configured properly")
        return False
    
    # Import file manager
    print("\n3. Importing file manager...")
    try:
        from file_manager import file_manager
        print("‚úÖ File manager imported successfully")
    except Exception as e:
        print(f"‚ùå Failed to import file manager: {e}")
        return False
    
    # Create test code
    print("\n4. Creating test code...")
    test_code = '''#!/usr/bin/env python3
"""
Test file generated by debug script
"""

def hello_world():
    """A simple test function"""
    return "Hello, GitHub!"

if __name__ == "__main__":
    print(hello_world())
'''
    
    # Save test code
    print("\n5. Saving test code...")
    try:
        result = file_manager.save_code(
            code=test_code,
            file_type="src",
            conversation_id="test_debug_upload",
            task_description="Test upload for debugging GitHub integration"
        )
        
        if result.get("success"):
            print("‚úÖ Code saved successfully")
            print(f"   File: {result.get('filepath')}")
            print(f"   Project: {result.get('project_name')}")
            
            # Check GitHub result
            github_result = result.get("github_result", {})
            if github_result.get("status") == "success":
                print("‚úÖ GitHub upload successful!")
                print(f"   Repository: {github_result.get('repo_url')}")
                print(f"   Files uploaded: {github_result.get('files_uploaded', 0)}")
            elif github_result.get("status") == "github_not_available":
                print("‚ö†Ô∏è GitHub not available - code saved locally only")
                print(f"   Error: {github_result.get('error')}")
            else:
                print("‚ùå GitHub upload failed")
                print(f"   Status: {github_result.get('status')}")
                print(f"   Error: {github_result.get('error')}")
        else:
            print("‚ùå Failed to save code")
            print(f"   Error: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå Exception during save: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\n" + "=" * 60)
    print("üéØ Test Complete")
    print("=" * 60)
    return True

if __name__ == "__main__":
    test_file_upload()
